worker_processes  4;

env             PWD;

error_log       /tmp/isucon/logs/error.log;
pid             /tmp/isucon/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include         nginx/conf/mime.types;
    default_type    application/octet-stream;
    lua_package_path 'nginx/lualib/?.lua;lib/?.lua;;';

    sendfile        on;
    keepalive_timeout 5;

    access_log  /tmp/isucon/logs/app.access.log;

    init_by_lua '
        conf = require "../app/config"
        app = require "../app/app"

        json = require "resty.libcjson"
        template = require "resty.template"
        resty_redis = require "resty.redis"
		local resty_sha256 = require "resty.sha256"
		sha256 = resty_sha256:new()
		str = require "resty.string"

        title = "isucon4"
        ';

    init_worker_by_lua '';

    server {
        listen      8080;
        set $template_root 'views';
        default_type    text/html;

        location = / {
			content_by_lua 'ngx.exec("/login")';
            #proxy_pass http://localhost:8080/login;
        }

        location /login {
            if ($request_method = POST) {
                content_by_lua '
                    local session = require ("resty.session").start()
					-- session.cookie.domain = ""

                    -- get post data
                    ngx.req.read_body()
                    local args, err = ngx.req.get_post_args()

                    app:start(conf.redis.host, conf.redis.port)

                    user, notice = app:attempt_login(args.login, args.password)

                    if user then
                        session.data.login = user.login
                        session:save()
                        ngx.redirect("/mypage")
                    else
                        session.data.notice = notice
                        session:save()
                        ngx.redirect("/")
                    end
                ';
            }
            content_by_lua '
                local session = require ("resty.session").start()
				-- session.cookie.domain = ""
				local headers = ngx.req.get_headers()
                local view = template.new("login.html", "base.html")

                view.title = title
                if session.data.notice then
                    view.notice = session.data.notice
                end
                view:render()
            ';
        }

        location /mypage {
            content_by_lua '
                local session = require ("resty.session").start()
				-- session.cookie.domain = ""
                app:start(conf.redis.host, conf.redis.port)
				local login = session.data.login
				if session.data.current_user then
					login = session.data.current_user
				end
				local current_user = app:current_user(login)
                if session.data.current_user or current_user then
					session.data.current_user = login
					session:save()
                    local view = template.new("mypage.html", "base.html")
                    view.title = title
                    local klast = app:key_last(login)
                    local last = app.redis:hgetall(klast)
                    if last then
                        local last = app.redis:array_to_hash(last)
                        view.last_logined_at = last.at
                        view.last_logined_ip = last.ip
                    end
                    view.name = session.data.login
                    view:render()
                else
					session.data.login = nil
                    session.data.notice = "You must be logged in"
                    session:save()
                    ngx.redirect("/")
                end
            ';
        }
        location /report {
            default_type    text/json;
            content_by_lua '
                app:start(conf.redis.host, conf.redis.port)
                local bannedip = {};
                local locked_user = {};
                for _,ip in pairs(app.redis:keys("isu4:ip:*")) do
                    if tonumber(app.redis:get(ip)) >= conf.ip_ban_threshold then
                        table.insert(bannedip, ip:sub(9))
                    end
                end
                for _,user in pairs(app.redis:keys("isu4:user_fail:*")) do
                    if tonumber(app.redis:get(user)) >= conf.user_lock_threshold then
                        table.insert(locked_user, user:sub(16))
                    end
                end

                local ret = {bannedip=bannedip, locked_user=locked_user};
                ngx.say(json.encode(ret));
            ';
        }

        location /stylesheets {
            alias ../public/stylesheets;
        }
        location /images {
            alias ../public/images;
        }
    }
}
