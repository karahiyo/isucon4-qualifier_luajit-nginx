worker_processes  1;

env             PWD;

error_log       /tmp/isucon/logs/error.log;
pid             /tmp/isucon/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include         nginx/conf/mime.types;
    default_type    application/octet-stream;
    lua_package_path 'nginx/lualib/?.lua;lib/?.lua;;';
    #lua_package_cpath 'nginx/lualib/resty/?.so;;';
    #lua_package_cpath 'nginx/lualib/resty/?.so;lib/?.so;;';

    sendfile        on;
    keepalive_timeout 30;

    access_log  /tmp/isucon/logs/app.access.log;

    init_by_lua '
        conf = require "../app/config" 
        app = require "../app/app"
        json = require "resty.libcjson"
        redis = require "resty.redis"
        template = require "resty.template"
        ';

    init_worker_by_lua '
        -- timeout: 1s
        redis:set_timeout(1000)

        local ok, err = redis:connect(conf.redis.host, conf.redis.port)
        if not ok then
            ngx.log(ngx.ERR, "failed to connect to redis: ", err)
            return ngx.exit(500)
        end
        ';

    server {
        listen      8080;
        server_name localhost;
        set $template_root 'views';
        default_type    text/html;

        location = / {
            proxy_pass http://localhost:8080/login;
        }

        location @post_login {
            content_by_lua_file  '../app/post_login.lua';
        }

        location /login {
            if ($request_method = POST) {
                content_by_lua '
                    return ngx.exec("@post_login")
                ';
            }
            content_by_lua '
                local session = require ("resty.session").start()
                local layout = template.new("login.html", "base.html")

                layout.title = "isucon4"
                if session.data.notice then
                    layout.notice = session.data.notice
                end
                layout:render()
            ';
        }

        location /mypage {
            content_by_lua '
                session = require ("resty.session").start()

                if session.data.login then
                    local view = template.new("mypage.html", "base.html")
                    view.title = "isucon4"
                    local klast = app:redis_key_last(session.data.login)
                    local last = redis:hgetall(klast)
                    if last then
                        local last = redis:array_to_hash(last)
                        view.last_logined_at = last.at
                        view.last_logined_ip = last.ip
                    end
                    view.name = session.data.login
                    view:render()
                else 
                    session.data.notice = "You must be logged in"
                    session:save()
                    ngx.redirect("/login")
                end
            ';
        }
        location /report {
            default_type    text/json;
            content_by_lua '
                ngx.say("{bannedip:[], locked_user:[]}");
            ';
        }

        location /stylesheets {
            alias ../public/stylesheets;
        }
        location /images {
            alias ../public/images;
        }
    }
}
